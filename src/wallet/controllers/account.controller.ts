import { Get, Post, Body, Put, Delete, Param, Query, Controller, HttpCode,ParseIntPipe, ParseBoolPipe, UsePipes } from '@nestjs/common';
import { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags, ApiParam, ApiBody } from '@nestjs/swagger';
import { AccountCreateDto } from '../dtos/account-create.dto';
import { AccountUpdateDto } from '../dtos/account-update.dto';
import { AccountDto } from '../dtos/account.dto';
import { AccountEntity } from '../entities/account.entity';
import { AccountService } from '../services/account.service';
import { AccountDtoMapper } from '../utils/account-dto.mapper';


@ApiBearerAuth()
@ApiTags('wallet/accounts')
@Controller('wallet/accounts')
export class AccountController { 

  constructor(private readonly accountService: AccountService) {}

  @ApiOperation({ summary: 'Create account' })
  @ApiResponse({ status: 201, description: 'The account has been successfully created.' })
  @ApiResponse({ status: 400, description: 'Invalid input.' })
  @Post()
  async create(@Body(/*new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_CREATE)*/) accountCreateDto: AccountCreateDto): Promise<AccountDto> {
    let gl:AccountEntity = await this.accountService.create({...accountCreateDto, deleted:false});
    let glDto:AccountDto = AccountDtoMapper.toAccountDto(gl);
    return glDto;
  }

  @ApiOperation({ summary: 'Update account' })
  @ApiResponse({ status: 200, description: 'The account has been successfully updated.' })
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Account not found by the given id.' })
  @Put(':id')
  async update(@Param('id', ParseIntPipe) id: number,@Body(/*new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_UPDATE)*/) accountUpdateDto: AccountUpdateDto) {
    let gl:AccountEntity = await this.accountService.update(id, {...accountUpdateDto, deleted:false});
    let glDto:AccountDto = AccountDtoMapper.toAccountDto(gl);
    return glDto;
  }

  @ApiOperation({ summary: 'Find all accounts' })
  @ApiResponse({ status: 200, description: 'Return all accounts.'})
  @Get('')
  async findAll(): Promise<AccountDto[]> {
    let gls:AccountEntity[] = await this.accountService.findAll(null,null);
    let glDtos:AccountDto[] = AccountDtoMapper.toAccountDtos(gls);
    return glDtos;
  }

  @ApiOperation({ summary: 'Find all accounts by the given query string params.' })  
  @ApiResponse({ status: 200, description: 'Return all accounts found.'})
  @Get('filter')
  async findByQueryParam(@Query('desc') desc: string,@Query('deleted',ParseBoolPipe) deleted: boolean): Promise<AccountDto[]> {
    let gls:AccountEntity[] = await this.accountService.findAll(null,null);
    let glDtos:AccountDto[] = AccountDtoMapper.toAccountDtos(gls);
    return glDtos;
  }


  @ApiOperation({ summary: 'Find a account by the given id.' })
  @ApiParam({ name: "id", description: "Unique numeric account id generated by the system for the account entities.", required: true, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return account found by the given id.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Account not found by the given id.' })
  @Get(':id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<AccountDto> {
    
    let gl:AccountEntity = await this.accountService.findById(id);
    let glDto:AccountDto = AccountDtoMapper.toAccountDto(gl);

    return glDto;
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Delete a account by the geiven id' })
  @ApiResponse({ status: 204, description: 'The account has been successfully deleted.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Account not found by the given id.' })
  @Delete(':id')
  async delete(@Param('id', ParseIntPipe) id: number): Promise<void> {
    await this.accountService.delete(id);

  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Purge account' })
  @ApiResponse({ status: 204, description: 'The account has been successfully purged.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Account not found by the given id.' })
  @Delete('purge/:id')
  async purge(@Param('id', ParseIntPipe) id: number): Promise<void> {
    await this.accountService.delete(id);
  }
}