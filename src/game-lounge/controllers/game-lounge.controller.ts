import { Get, Post, Body, Put, Delete, Param, Query, Controller, HttpCode,ParseIntPipe, ParseBoolPipe, UsePipes } from '@nestjs/common';
import { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags, ApiParam, ApiBody } from '@nestjs/swagger';
import GamingLoungeUpdateDto from '../dtos/game-lounge-update.dto';
import { VALIDATION_SCHEMA_GAME_LOUNGE_CREATE, VALIDATION_SCHEMA_GAME_LOUNGE_UPDATE } from '../../common/pipes/validation';
import { GameLoungeService } from '../services/game-lounge.service';
import { ValidationPipe } from '../../common/pipes/validation.pipe';
import {GameLoungeCreateDto} from '../dtos/game-lounge-create.dto';
import { GameLoungeEntity } from '../entities/game-lounge.entity';
import { GameLoungeDto } from '../dtos/game-lounge.dto';
import { GLDtoMapper } from '../utils/game-lounge.dto.mapper';
import { GameLoungeUserAddDto } from '../dtos/game-lounge-user-add.dto';
import { GameLoungeUserEntity } from '../entities/game-lounge-user.entity';
import { GameLoungeUserDto } from '../dtos/game-lounge-user.dto';

@ApiBearerAuth()
@ApiTags('game-lounges')
@Controller('game-lounges')
export class GameLoungeController { 

  constructor(private readonly gameLoungeService: GameLoungeService) {}

  @ApiOperation({ summary: 'Add player to a gaming lounge' })
  @ApiResponse({ status: 201, description: 'The palyer has been successfully added to the game lounge.' })
  @ApiResponse({ status: 400, description: 'Invalid input.' })
  @Post(':id/players/')
  async addUser(@Param('id', ParseIntPipe) id: number,@Body() gameLoungeUserAddDto: GameLoungeUserAddDto) : Promise<GameLoungeUserDto> {
    let glUserEntity:GameLoungeUserEntity = await this.gameLoungeService.addPlayer({gameLoungeId:id, ...gameLoungeUserAddDto});
    return GLDtoMapper.toGameLoungeUserDto(glUserEntity);
  }

  @ApiOperation({ summary: 'Find all players in a given game lounge by id' })
  @ApiResponse({ status: 200, description: 'Return all players joned the given game lounge.'})
  @Get(':id/players')
  async findAllGameLoungePlayers(@Param('id', ParseIntPipe) id: number,): Promise<GameLoungeUserDto[]> {
    let gls:GameLoungeUserEntity[] = await this.gameLoungeService.findAllGlPlayers(id);
    let glUDtos:GameLoungeUserDto[] = GLDtoMapper.toGameLoungeUserDtos(gls)
    return glUDtos;
  }

  @ApiOperation({ summary: 'Create gaming lounge' })
  @ApiResponse({ status: 201, description: 'The gaming lounge has been successfully created.' })
  @ApiResponse({ status: 400, description: 'Invalid input.' })
  @Post()
  async create(@Body(/*new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_CREATE)*/) gameLoungeCreateDto: GameLoungeCreateDto): Promise<GameLoungeDto> {
    let gl:GameLoungeEntity = await this.gameLoungeService.create({...gameLoungeCreateDto, deleted:false});
    let glDto:GameLoungeDto = GLDtoMapper.toGameLoungeDto(gl);
    return glDto;
  }

  @ApiOperation({ summary: 'Update gaming lounge' })
  @ApiResponse({ status: 200, description: 'The gaming lounge has been successfully updated.' })
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Game lounge not found by the given id.' })
  @Put(':id')
  async update(@Param('id', ParseIntPipe) id: number,@Body(/*new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_UPDATE)*/) gamingLoungeUpdateDto: GamingLoungeUpdateDto) {
    let gl:GameLoungeEntity = await this.gameLoungeService.update(id, gamingLoungeUpdateDto);
    let glDto:GameLoungeDto = GLDtoMapper.toGameLoungeDto(gl);
    return glDto;
  }

  @ApiOperation({ summary: 'Find all gaming lounges' })
  @ApiResponse({ status: 200, description: 'Return all gaming lounges.'})
  @Get('')
  async findAll(): Promise<GameLoungeDto[]> {
    let gls:GameLoungeEntity[] = await this.gameLoungeService.findAll(null,null);
    let glDtos:GameLoungeDto[] = GLDtoMapper.toGameLoungeDtos(gls);
    return glDtos;
  }

  @ApiOperation({ summary: 'Find all game lounges by the given query string params.' })  
  @ApiResponse({ status: 200, description: 'Return all game lounges found.'})
  @Get('filter')
  async findByQueryParam(@Query('desc') desc: string,@Query('deleted',ParseBoolPipe) deleted: boolean): Promise<GameLoungeEntity[]> {
    return await this.gameLoungeService.findAll(null,null);
  }


  @ApiOperation({ summary: 'Find a game lounge by the given id.' })
  @ApiParam({ name: "id", description: "Unique numeric game lounge id generated by the system for the game lounge entities.", required: true, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return game lounge found by the given id.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Game lounge not found by the given id.' })
  @Get(':id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<GameLoungeDto> {
    
    let gl:GameLoungeEntity = await this.gameLoungeService.findById(id);
    let glDto:GameLoungeDto = GLDtoMapper.toGameLoungeDto(gl);

    return glDto;
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Delete a game lounge by the geiven id' })
  @ApiResponse({ status: 204, description: 'The game lounge has been successfully deleted.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Game lounge not found by the given id.' })
  @Delete(':id')
  async delete(@Param('id', ParseIntPipe) id: number): Promise<void> {
    await this.gameLoungeService.delete(id);

  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Purge gaming lounge' })
  @ApiResponse({ status: 204, description: 'The gaming lounge has been successfully purged.'})
  @ApiResponse({ status: 400, description: 'Invalid id.' })
  @ApiResponse({ status: 404, description: 'Game lounge not found by the given id.' })
  @Delete('purge/:id')
  async purge(@Param('id', ParseIntPipe) id: number): Promise<void> {
    await this.gameLoungeService.delete(id);
  }
}